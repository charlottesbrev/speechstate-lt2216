{"version":3,"sources":["dmAppointmentProject.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","acknowledge","isStarting","selectedMatches","check_yes","check_no","dmMachine","initial","states","idle","on","CLICK","target","actions","assign","threshold","context","init","TTS_READY","welcome_to_game","ENDSPEECH","start","entry","login","RECOGNISED","cond","recResult","utterance","confidence","HELPME","TIMEOUT","sentenceCounter","sentences","length","reset","always","helpme","prompt","wait_for_name","nomatch","unsure_of_login","COMPUTER_RIGHT","c","saved","COMPUTER_WRONG","first_question","repeat_question","yes","no","set_username","JUMP","setup","username","help_rules","who_starts","numberOfMatches","maxPick","select_whattodo","unsure_of_who_starts","intro","say_computer_starts","say_computer_turn","computer_turn","pickNumberOfMatches","turn","min","max","Math","ceil","floor","random","say_player_starts","say_player_turn","player_can_pick_1","player_can_pick_2","player_can_pick_3","unsure_of_player_picks","player_picks","check_player_pick","wrong_pick","player_turn","check_winner","SAY_MATCHES_LEFT","console","log","computer_wins","player_wins","goodbye","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","name","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"+XAEA,SAASA,EAAIC,GACT,OAAOC,aAAK,SAACC,GAAD,MAA2B,CAAEC,KAAM,QAASC,MAAOJ,MAGnE,IAAMK,EAAqG,CACvG,OAAQ,CAAEC,YAAa,OACvB,MAAO,CAAEA,YAAa,MACtB,aAAc,CAAEA,YAAa,OAC7B,UAAW,CAAEA,YAAa,MAE1B,IAAO,CAAEC,WAAY,YACrB,iBAAkB,CAAEA,WAAY,YAChC,KAAM,CAAEA,WAAY,UACpB,mBAAoB,CAAEA,WAAY,UAElC,OAAQ,CAAEC,gBAAiB,GAC3B,KAAM,CAAEA,gBAAiB,GACzB,aAAc,CAAEA,gBAAiB,GACjC,aAAc,CAAEA,gBAAiB,GACjC,cAAe,CAAEA,gBAAiB,GAClC,oBAAqB,CAAEA,gBAAiB,GACxC,oBAAqB,CAAEA,gBAAiB,GACxC,cAAe,CAAEA,gBAAiB,GAClC,oBAAqB,CAAEA,gBAAiB,GACxC,oBAAqB,CAAEA,gBAAiB,GAExC,OAAQ,CAAEA,gBAAiB,GAC3B,KAAM,CAAEA,gBAAiB,GACzB,eAAgB,CAAEA,gBAAiB,GACnC,cAAe,CAAEA,gBAAiB,GAClC,cAAe,CAAEA,gBAAiB,GAClC,sBAAuB,CAAEA,gBAAiB,GAC1C,qBAAsB,CAAEA,gBAAiB,GACzC,cAAe,CAAEA,gBAAiB,GAClC,sBAAuB,CAAEA,gBAAiB,GAC1C,qBAAsB,CAAEA,gBAAiB,GAEzC,SAAU,CAAEA,gBAAiB,GAC7B,KAAM,CAAEA,gBAAiB,GACzB,iBAAkB,CAAEA,gBAAiB,GACrC,gBAAiB,CAAEA,gBAAiB,GACpC,gBAAiB,CAAEA,gBAAiB,GACpC,wBAAyB,CAAEA,gBAAiB,GAC5C,uBAAwB,CAAEA,gBAAiB,GAC3C,gBAAiB,CAAEA,gBAAiB,GACpC,wBAAyB,CAAEA,gBAAiB,GAC5C,uBAAwB,CAAEA,gBAAiB,IAG/C,SAASC,EAAUT,GACf,MAAgB,SAATA,GAA4B,eAATA,EAG9B,SAASU,EAASV,GACd,MAAgB,QAATA,GAA2B,YAATA,EAS7B,IAGaW,EAAuD,CAChEC,QAAS,OACTC,OAAQ,CACJC,KAAM,CACFC,GAAI,CACAC,MAAO,CAAEC,OAAQ,OAAQC,QAASC,YAAO,CAAEC,UAAY,SAACC,GAAD,MAAa,SAG5EC,KAAM,CACFP,GAAI,CACAQ,UAAW,kBACXP,MAAO,oBAGfQ,gBAAiB,CACbZ,QAAS,QACTG,GAAI,CAAEU,UAAW,SACjBZ,OAAQ,CACJa,MAAO,CACHC,MAAO5B,EAAI,gDAIvB6B,MAAO,CACHhB,QAAS,QACTG,GAAI,CACAc,WAAY,CACR,CACIZ,OAAQ,UACRa,KAAM,SAACT,GAAD,MAAiD,UAApCA,EAAQU,UAAU,GAAGC,YAE5C,CACIf,OAAQ,kBACRa,KAAM,SAACT,GAAD,OAAaA,EAAQU,UAAU,GAAGE,WAAaZ,EAAQD,YAEjE,CACIH,OAAQ,iBAGhBiB,OAAQ,OACRC,QAAS,CACL,CACIlB,OAAQ,OACRa,KAAM,SAACT,GAAD,OAAaA,EAAQe,iBAAmBf,EAAQgB,UAAUC,SAEpE,CACIrB,OAAQ,aAIpBJ,OAAQ,CACJ0B,MAAO,CACHZ,MAAO,CACHR,YAAO,CAAEiB,gBAAiB,SAACf,GAAD,OAAa,KACvCF,YAAO,CAAEkB,UAAW,SAAChB,GAAD,MAAa,CAAC,qBAAsB,4BAA6B,4CAEzFmB,OAAQ,UAEZC,OAAQ,CACJd,MAAO5B,EAAI,wBACXgB,GAAI,CAAEU,UAAW,CAACP,QAAQjB,YAAK,aAEnCyC,OAAQ,CACJf,MAAO,CAAC1B,aAAK,SAACoB,GAAD,MAA0B,CAC/BlB,KAAM,QACNC,MAAOiB,EAAQgB,UAAUhB,EAAQe,sBAEzCrB,GAAI,CACAU,UAAW,CACPR,OAAQ,gBACRC,QAASC,YAAO,CAAEiB,gBAAiB,SAACf,GAAD,OAAaA,EAAQe,gBAAkB,QAItFO,cAAe,CACXhB,MAAO1B,YAAK,WAEhB2C,QAAS,CACLjB,MAAO5B,EAAI,sDACXgB,GAAI,CAAEU,UAAW,oBAI7BoB,gBAAiB,CACbjC,QAAS,iBACTG,GAAI,CACAc,WAAY,CACR,CAAEZ,OAAQ,OAAQa,KAAM,SAACT,GAAD,OAAaZ,EAAUY,EAAQU,UAAU,GAAGC,aACpE,CAAEf,OAAQ,MAAOa,KAAM,SAACT,GAAD,OAAaX,EAASW,EAAQU,UAAU,GAAGC,aAClE,CAAEf,OAAQ,aAEd6B,eAAgB,CAAE7B,OAAQ,eAAgBC,QAAS,CAAEC,YAAO,CAACY,UAAW,SAACgB,GAAD,OAAOA,EAAEC,WACjFC,eAAgB,CAAEhC,OAAQ,QAASC,QAASC,YAAO,CAACY,UAAW,SAACgB,GAAD,OAAOA,EAAEC,UACxEb,QAAS,oBAEbtB,OAAQ,CACJqC,eAAgB,CACZvB,MAAO,CACHR,YAAO,CAAC6B,MAAO,SAACD,GAAD,OAAOA,EAAEhB,aACxB9B,aAAK,SAACoB,GAAD,MAA0B,CAC3BlB,KAAM,QAASC,MAAM,gBAAD,OAAkBiB,EAAQU,UAAU,GAAGC,UAAvC,UAG5BjB,GAAI,CACAU,UAAW,CAAEP,QAASjB,YAAK,aAGnCkD,gBAAiB,CACbxB,MAAO,CAAC1B,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QAASC,MAAM,gBAAD,OAAkBiB,EAAQU,UAAU,GAAGC,UAAvC,UAExBjB,GAAI,CACAU,UAAW,CAAEP,QAASjB,YAAK,aAGnCmD,IAAK,CAAEzB,MAAO1B,YAAK,mBACnBoD,GAAI,CAAE1B,MAAO1B,YAAK,mBAClB2C,QAAS,CACLjB,MAAO5B,EAAI,uDACXgB,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,eAI7CqD,aAAc,CACV1C,QAAS,QACTG,GAAI,CAAEwC,KAAM,cACZ1C,OAAQ,CACJ2C,MAAO,CACH7B,MAAO,CACHR,YAAO,CAAEsC,SAAU,SAACpC,GAAD,OAAaA,EAAQU,UAAU,GAAGC,aACrD/B,aAAK,SAACoB,GAAD,MAA0B,CAC3BlB,KAAM,QACNC,MAAM,qBAAD,OAAuBiB,EAAQoC,SAA/B,UAGb1C,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,aAI7CyD,WAAY,CACR9C,QAAS,QACTG,GAAI,CAAEwC,KAAM,cACZ1C,OAAQ,CACJ2C,MAAO,CACH7B,MAAO5B,EAAI,6PAIXgB,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,aAI7C0D,WAAY,CACR/C,QAAS,QACTG,GAAI,CACAc,WAAY,CACR,CACIZ,OAAQ,UACRa,KAAM,SAACT,GAAD,MAAiD,UAApCA,EAAQU,UAAU,GAAGC,YAE5C,CACIf,OAAQ,uBACRa,KAAM,SAACT,GAAD,OAAaA,EAAQU,UAAU,GAAGE,WAAaZ,EAAQD,YAEjE,CACIH,OAAQ,QACRa,KAAM,SAACT,GAAD,MAAa,eAAiBhB,EAAQgB,EAAQU,UAAU,GAAGC,YAAc,KAC/Ed,QAAS,CAAEC,YAAO,CAAEZ,WAAY,SAACwC,GAAD,OAAO1C,EAAQ0C,EAAEhB,UAAU,GAAGC,WAAWzB,gBAE7E,CACIU,OAAQ,aAGhBiB,OAAQ,QACRC,QAAS,CACL,CACIlB,OAAQ,OACRa,KAAM,SAACT,GAAD,OAAaA,EAAQe,iBAAmBf,EAAQgB,UAAUC,SAEpE,CACIrB,OAAQ,aAIpBJ,OAAQ,CACJ0B,MAAO,CACHZ,MAAO,CACHR,YAAO,CAAEyC,gBAAiB,SAACvC,GAAD,OAAa,MACvCF,YAAO,CAAE0C,QAAS,SAACxC,GAAD,OAAa,KAC/BF,YAAO,CAAEiB,gBAAiB,SAACf,GAAD,OAAa,KACvCF,YAAO,CAAEkB,UAAW,SAAChB,GAAD,MAAa,CAAC,GAAD,OAAIA,EAAQoC,SAAZ,uCAA2D,6CAA8C,iFAE9IjB,OAAQ,UAEZC,OAAQ,CACJd,MAAO5B,EAAI,8CACXgB,GAAI,CAAEU,UAAW,CAACP,QAAQjB,YAAK,aAEnCyC,OAAQ,CACJf,MAAO,CACH1B,aAAK,SAACoB,GAAD,MAA0B,CAC3BlB,KAAM,QACNC,MAAOiB,EAAQgB,UAAUhB,EAAQe,sBAGzCrB,GAAI,CACAU,UAAW,CACPR,OAAQ,kBACRC,QAASC,YAAO,CAAEiB,gBAAiB,SAACf,GAAD,OAAaA,EAAQe,gBAAkB,QAItF0B,gBAAiB,CACbnC,MAAO1B,YAAK,WAEhB2C,QAAS,CACLjB,MAAO5B,EAAI,mCACXgB,GAAI,CAAEU,UAAW,sBAI7BsC,qBAAsB,CAClBnD,QAAS,iBACTG,GAAI,CACAc,WAAY,CACR,CAAEZ,OAAQ,OAAQa,KAAM,SAACT,GAAD,OAAaZ,EAAUY,EAAQU,UAAU,GAAGC,aACpE,CAAEf,OAAQ,MAAOa,KAAM,SAACT,GAAD,OAAaX,EAASW,EAAQU,UAAU,GAAGC,aAClE,CAAEf,OAAQ,aAEd6B,eAAgB,CACZ,CACI7B,OAAQ,QACRa,KAAM,SAACT,GAAD,MAAa,eAAiBhB,EAAQgB,EAAQ2B,MAAM,GAAGhB,YAAc,KAC3Ed,QAAS,CAAEC,YAAO,CAAEZ,WAAY,SAACwC,GAAD,OAAO1C,EAAQ0C,EAAEC,MAAM,GAAGhB,WAAWzB,gBAEzE,CACIU,OAAQ,qBACRC,QAAS,CAAEC,YAAO,CAACY,UAAW,SAACgB,GAAD,OAAOA,EAAEC,YAG/CC,eAAgB,CAAEhC,OAAQ,aAAcC,QAASC,YAAO,CAACY,UAAW,SAACgB,GAAD,OAAOA,EAAEC,UAC7Eb,QAAS,oBAEbtB,OAAQ,CACJqC,eAAgB,CACZvB,MAAO1B,aAAK,SAACoB,GAAD,MAA0B,CAClClB,KAAM,QAASC,MAAM,gBAAD,OAAkBiB,EAAQU,UAAU,GAAGC,UAAvC,SAExBjB,GAAI,CACAU,UAAW,CAAEP,QAAS,CAAEjB,YAAK,UAAWkB,YAAO,CAAC6B,MAAO,SAACD,GAAD,OAAOA,EAAEhB,iBAGxEoB,gBAAiB,CACbxB,MAAO,CAAC1B,aAAK,SAACoB,GAAD,MAAc,CACvBlB,KAAM,QAASC,MAAM,gBAAD,OAAkBiB,EAAQ2B,MAAM,GAAGhB,UAAnC,UAExBjB,GAAI,CACAU,UAAW,CAAEP,QAASjB,YAAK,aAGnCmD,IAAK,CAAEzB,MAAO1B,YAAK,mBACnBoD,GAAI,CAAE1B,MAAO1B,YAAK,mBAClB2C,QAAS,CACLjB,MAAO5B,EAAI,uDACXgB,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,eAI7C+D,MAAO,CACHpD,QAAS,QACTG,GAAI,CACAwC,KAAM,CACF,CACItC,OAAQ,sBACRa,KAAM,SAACT,GAAD,MAAoC,aAAvBA,EAAQd,aAE/B,CACIU,OAAQ,oBACRa,KAAM,SAACT,GAAD,MAAoC,WAAvBA,EAAQd,aAE/B,CACIU,OAAQ,gBAIpBJ,OAAQ,CACJa,MAAO,CACHC,MAAO,CAAC1B,YAAK,YAIzBgE,oBAAqB,CACjBrD,QAAS,QACTG,GAAI,CAAEwC,KAAM,iBACZ1C,OAAQ,CACJa,MAAO,CACHC,MAAO5B,EAAI,gFAEXgB,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,aAI7CiE,kBAAmB,CACftD,QAAS,QACTG,GAAI,CAAEU,UAAW,iBACjBZ,OAAQ,CACJa,MAAO,CACHC,MAAO5B,EAAI,yBAIvBoE,cAAe,CACXvD,QAAS,QACTG,GAAI,CACAwC,KAAM,CACF,CACIzB,KAAM,SAACT,GAAD,OAA6C,IAAhCA,EAAQ+C,qBAC3BlD,QAASjB,aAAK,SAACoB,GAAD,MAA0B,CACpClB,KAAM,QAASC,MAAM,wBAAD,OAA0BiB,EAAQ+C,oBAAlC,gBAG5B,CACIlD,QAASjB,aAAK,SAACoB,GAAD,MAA0B,CACpClB,KAAM,QAASC,MAAM,wBAAD,OAA0BiB,EAAQ+C,oBAAlC,mBAIhC3C,UAAW,gBAEfZ,OAAQ,CACJa,MAAO,CACHC,MAAO,CACHR,YAAO,CAACkD,KAAM,SAAChD,GAAD,MAAa,cAC3BF,YAAO,CAACiD,oBAAqB,SAAC/C,GAAD,OAtV/BiD,EAsVyD,EAtV5CC,EAsV8ClD,EAAQwC,QArVxFS,EAAME,KAAKC,KAAKH,GAChBC,EAAMC,KAAKE,MAAMH,GACVC,KAAKE,MAAMF,KAAKG,UAAYJ,EAAMD,EAAM,IAAMA,EAHtD,IAAsBA,EAAaC,KAuVXtE,YAAK,YAKrB2E,kBAAmB,CACfhE,QAAS,QACTG,GAAI,CAAEwC,KAAM,eACZ1C,OAAQ,CACJa,MAAO,CACHC,MAAO1B,aAAK,SAACoB,GAAD,MAA0B,CAClClB,KAAM,QACNC,MAAM,kBAAD,OAAoBiB,EAAQoC,SAA5B,oEAGT1C,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,aAI7C4E,gBAAiB,CACbjE,QAAS,QACTG,GAAI,CAAEU,UAAW,eACjBZ,OAAQ,CACJa,MAAO,CACHC,MAAO,CACH1B,aAAK,SAACoB,GAAD,MAA0B,CAC3BlB,KAAM,QAASC,MAAM,wBAAD,OAA0BiB,EAAQoC,SAAlC,aAMxCqB,kBAAmB,CACflE,QAAS,QACTG,GAAI,CAAEU,UAAW,gBACjBZ,OAAQ,CACJa,MAAO,CAAEC,MAAO5B,EAAI,4BAG5BgF,kBAAmB,CACfnE,QAAS,QACTG,GAAI,CAAEU,UAAW,gBACjBZ,OAAQ,CACJa,MAAO,CAAEC,MAAO5B,EAAI,2BAG5BiF,kBAAmB,CACfpE,QAAS,QACTG,GAAI,CAAEU,UAAW,gBACjBZ,OAAQ,CACJa,MAAO,CAAEC,MAAO5B,EAAI,8BAG5BkF,uBAAwB,CACpBrE,QAAS,QACTG,GAAI,CACAU,UAAW,CACP,CACIK,KAAM,SAACT,GAAD,OAAiC,IAApBA,EAAQwC,SAC3B5C,OAAQ,qBAEZ,CACIa,KAAM,SAACT,GAAD,OAAiC,IAApBA,EAAQwC,SAC3B5C,OAAQ,qBAEZ,CACIA,OAAQ,uBAIpBJ,OAAQ,CACJa,MAAO,CACHC,MAAO1B,aAAK,SAACoB,GAAD,MAA0B,CAClClB,KAAM,QAASC,MAAM,qCAAD,OAAuCiB,EAAQoC,SAA/C,YAKpCyB,aAAc,CACVtE,QAAS,QACTG,GAAI,CACAc,WAAY,CASR,CACIZ,OAAQ,oBACRa,KAAM,SAACT,GAAD,MAAa,oBAAsBhB,EAAQgB,EAAQU,UAAU,GAAGC,YAAc,KACpFd,QAAS,CAAEC,YAAO,CAAEX,gBAAiB,SAACuC,GAAD,OAAO1C,EAAQ0C,EAAEhB,UAAU,GAAGC,WAAWxB,qBAElF,CACIS,OAAQ,4BAIpBJ,OAAQ,CACJa,MAAO,CAAEC,MAAO1B,YAAK,aAG7BkF,kBAAmB,CACfvE,QAAS,QACTG,GAAI,CACAwC,KAAM,CACF,CACItC,OAAQ,eACRa,KAAM,SAACT,GAAD,OAAeA,EAAQwC,SAAW,GAAiC,IAA5BxC,EAAQb,iBACrDU,QAASC,YAAO,CAAEiD,oBAAqB,SAAC/C,GAAD,OAAa,MAExD,CACIJ,OAAQ,eACRa,KAAM,SAACT,GAAD,OAAeA,EAAQwC,SAAW,GAAiC,IAA5BxC,EAAQb,iBACrDU,QAASC,YAAO,CAAEiD,oBAAqB,SAAC/C,GAAD,OAAa,MAExD,CACIJ,OAAQ,eACRa,KAAM,SAACT,GAAD,OAAmC,IAApBA,EAAQwC,SAA6C,IAA5BxC,EAAQb,iBACtDU,QAASC,YAAO,CAAEiD,oBAAqB,SAAC/C,GAAD,OAAa,MAExD,CACIJ,OAAQ,gBAIpBJ,OAAQ,CACJa,MAAO,CAAEC,MAAO1B,YAAK,WAG7BmF,WAAY,CACRxE,QAAS,QACTG,GAAI,CACAwC,KAAM,CACF,CACItC,OAAQ,oBACRa,KAAM,SAACT,GAAD,OAAyC,IAA5BA,EAAQb,iBAC3BU,QAASjB,aAAK,SAACoB,GAAD,MAA0B,CACpClB,KAAM,QAASC,MAAM,cAAD,OAAgBiB,EAAQb,gBAAxB,oCAAmEa,EAAQwC,QAA3E,UAG5B,CACI5C,OAAQ,oBACRa,KAAM,SAACT,GAAD,OAAiC,IAApBA,EAAQwC,SAC3B3C,QAASjB,aAAK,SAACoB,GAAD,MAA0B,CACpClB,KAAM,QAASC,MAAM,cAAD,OAAgBiB,EAAQb,gBAAxB,sCAAqEa,EAAQwC,QAA7E,UAG5B,CACI5C,OAAQ,oBACRC,QAASjB,aAAK,SAACoB,GAAD,MAA0B,CACpClB,KAAM,QAASC,MAAM,cAAD,OAAgBiB,EAAQb,gBAAxB,sCAAqEa,EAAQwC,QAA7E,YAKpChD,OAAQ,CACJa,MAAO,CAAEC,MAAO1B,YAAK,WAG7BoF,YAAa,CACTzE,QAAS,QACTG,GAAI,CACAwC,KAAM,CACF,CACItC,OAAQ,oBACRa,KAAM,SAACT,GAAD,OAAiC,IAApBA,EAAQwC,UAE/B,CACI5C,OAAQ,oBACRa,KAAM,SAACT,GAAD,OAAiC,IAApBA,EAAQwC,UAE/B,CACI5C,OAAQ,uBAIpBJ,OAAQ,CACJa,MAAO,CAAEC,MAAO,CAAER,YAAO,CAACkD,KAAM,SAAChD,GAAD,MAAa,YAAapB,YAAK,YAIvEqF,aAAc,CACV1E,QAAS,QACTG,GAAI,CACAwC,KAAM,CACF,CACItC,OAAQ,gBACRa,KAAM,SAACT,GAAD,OAAaA,EAAQuC,iBAAmB,GAAsB,aAAjBvC,EAAQgD,OAE/D,CACIpD,OAAQ,cACRa,KAAM,SAACT,GAAD,OAAaA,EAAQuC,iBAAmB,GAAsB,WAAjBvC,EAAQgD,OAE/D,CACIpD,OAAQ,oBACRa,KAAM,SAACT,GAAD,MAA8B,WAAjBA,EAAQgD,OAE/B,CACIpD,OAAQ,kBACRa,KAAM,SAACT,GAAD,MAA8B,aAAjBA,EAAQgD,QAGnCkB,iBAAkB,CACd,CACIzD,KAAM,SAACT,GAAD,OAAyC,IAA5BA,EAAQuC,iBAC3B1C,QAASjB,aAAK,SAACoB,GAAD,MAA0B,CACpClB,KAAM,QAASC,MAAM,iBAAD,OAAmBiB,EAAQuC,gBAA3B,qBAG5B,CACI1C,QAASjB,aAAK,SAACoB,GAAD,MAA0B,CACpClB,KAAM,QAASC,MAAM,aAAD,OAAeiB,EAAQuC,gBAAvB,wBAIhCnC,UAAW,CAAEP,QAASjB,YAAK,UAE/BY,OAAQ,CACJa,MAAO,CACHC,MAAO,CACHR,YAAO,CAACyC,gBAAiB,SAACvC,GAA2H,OAA7GmE,QAAQC,IAAI,sBAAwBpE,EAAQuC,gBAAkB,eAAiBvC,EAAQ+C,qBAA6B/C,EAAQuC,gBAAkBvC,EAAQ+C,uBAC9LjD,YAAO,CAAC0C,QAAS,SAACxC,GACd,OAAIA,EAAQuC,gBAAkB,EACnBvC,EAAQuC,gBAER,KAEf3D,YAAK,wBAKrByF,cAAe,CACX9E,QAAS,QACTG,GAAI,CACAc,WAAY,CACR,CACIZ,OAAQ,aACRa,KAAM,SAACT,GAAD,OAAaZ,EAAUY,EAAQU,UAAU,GAAGC,aAEtD,CACIf,OAAQ,UACRa,KAAM,SAACT,GAAD,OAAaX,EAASW,EAAQU,UAAU,GAAGC,aAErD,CACIf,OAAQ,cAIpBJ,OAAQ,CACJa,MAAO,CACHC,MAAO5B,EAAI,iEAEXgB,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,aAErC2C,QAAS,CACLjB,MAAO5B,EAAI,oDACXgB,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,eAI7C0F,YAAa,CACT/E,QAAS,QACTG,GAAI,CACAc,WAAY,CACR,CACIZ,OAAQ,aACRa,KAAM,SAACT,GAAD,OAAaZ,EAAUY,EAAQU,UAAU,GAAGC,aAEtD,CACIf,OAAQ,UACRa,KAAM,SAACT,GAAD,OAAaX,EAASW,EAAQU,UAAU,GAAGC,aAErD,CACIf,OAAQ,cAIpBJ,OAAQ,CACJa,MAAO,CACHC,MAAO1B,aAAK,SAACoB,GAAD,MAA0B,CAClClB,KAAM,QAASC,MAAM,mBAAD,OAAqBiB,EAAQoC,SAA7B,qGAGxB1C,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,aAErC2C,QAAS,CACLjB,MAAO5B,EAAI,oDACXgB,GAAI,CAAEU,UAAW,CAAEP,QAASjB,YAAK,eAI7C2F,QAAS,CACLhF,QAAS,SACTG,GAAI,CAAEU,UAAW,QACjBZ,OAAQ,CACJ6B,OAAQ,CAAEf,MAAO5B,EAAI,wC,4CClrB7BE,EAAiBiB,IAAjBjB,KAAM4F,EAAW3E,IAAX2E,OAGRC,EAAS,cAEfC,YAAQ,CACJC,IAAK,iCACLC,QAAQ,IAIZ,IAEMC,EAAUC,YAAmC,CAC/CC,GAAI,OACJjG,KAAM,WACNU,OAAQ,CACJwF,GAAG,eACI1F,GAGP2F,OAAQ,CACJ1F,QAAS,OACTC,OAAQ,CACJS,KAAM,CACFP,GAAI,CACAC,MAAO,CACHC,OAAQ,WACRC,QAAS,CACLC,YAAO,CACHoF,SAAU,SAACC,GAAD,OACN,IAAMC,OAAeC,cAAiBD,OAAeE,uBAE7D,SAACtF,GAAD,OACIuF,UAAUC,aAAaC,aAAa,CAAEC,OAAO,IACxCC,MAAK,SAASC,GAAU5F,EAAQkF,SAASW,wBAAwBD,WAK1FE,SAAU,CACNC,OAAQ,CACJhB,GAAI,wBACJiB,IAAK,SAACb,EAAMc,GAAP,OAAgBC,KACrBC,OAAQ,CACJtG,QAAS,CACLC,aAAO,SAACjB,EAAUuH,GAAY,MAAO,CAAEC,wBAAyBD,EAAME,SACtE,eACJ1G,OAAQ,eAEZ2G,QAAS,CACL3G,OAAQ,UAIpB4G,YAAa,CACTT,OAAQ,CACJhB,GAAI,UACJiB,IAAK,SAAChG,EAASyG,GAAV,OAAqB,SAACC,EAAUC,GACjC,IAAMC,EAAWC,IAA8B,CAC3CC,aAAc9G,EAAQkF,SACtB6B,YAAa,CACTC,OAAQvC,EACRwC,mBAAoBjH,EAAQqG,2BAG5Ba,EAA8CN,EAA9CM,gBAAiBC,EAA6BP,EAA7BO,yBACzBnH,EAAQoH,IAAMF,EACdlH,EAAQqH,aAAeF,EACvBnH,EAAQoH,IAAIE,iBAAiB,iBAAiB,WAC1CtH,EAAQoH,IAAI5C,SACZ,IAAM+C,EAASvH,EAAQoH,IAAII,YACvBC,EAAUC,OAAO,QAAS,KAE1BD,EAAUC,OAAOC,QAAiC,KAEtD,IAAMC,EAAQL,EAAOM,MAAK,SAACC,GAAD,OAAYL,EAAQM,KAAKD,EAAEE,SACjDJ,GACA5H,EAAQ4H,MAAQA,EAChBlB,EAAS,eAETvC,QAAQ8D,MAAR,oDAA2DR,IAC3Df,EAAS,oBAKzBhH,GAAI,CACAQ,UAAW,OACXgI,UAAW,SAGnBzI,KAAM,CACFC,GAAI,CACAyI,OAAQ,cACRC,MAAO,CACHxI,OAAQ,WACRC,QAASC,aAAO,SAACjB,EAAUuH,GAAY,MAAO,CAAEiC,UAAWjC,EAAMrH,aAI7EuJ,YAAa,CACT/I,QAAS,UACTgJ,KAAM,UACN7I,GAAI,CACA8I,UAAW,CACP3I,QAAS,CAAC,eACNC,aAAO,SAACjB,EAAUuH,GACd,MAAO,CACH1F,UAAW0F,EAAMrH,WAG7Ba,OAAQ,UAEZY,WAAY,OACZiI,OAAQ,OACR9I,MAAO,UAEXH,OAAQ,CACJkJ,QAAS,CACLpI,MAAO,CACH,WACA1B,EACI,CAAEE,KAAM,WACR,CAAE6J,MAAO,SAAC3I,GAAD,OAAc,KAAQA,EAAQ4I,cAjHlD,KAiHsF7D,GAAI,aAEvFrF,GAAI,CACAoB,QAAS,oBACT+H,YAAa,cAEjBN,KAAM/D,EAAO,YAEjBsE,WAAY,GAEZC,MAAO,CACHzI,MAAO1B,EAAK,eAEhBoK,MAAO,CACH1I,MAAO,UACPZ,GAAI,CAAEC,MAAO,cAIzBsJ,SAAU,CACN3I,MAAO,WACPZ,GAAI,CACAU,UAAW,OACXqI,OAAQ,OACR9I,MAAO,CAAEC,OAAQ,OAAQC,QAASjB,EAAK,eAE3C2J,KAAM,WAEVW,KAAM,OAKlB,CACIrJ,QAAS,CACLsJ,aAAc,SAACnJ,GAEXmE,QAAQC,IAAI,KAAMpE,EAAQU,UAAU,GAAlB,UAAmCV,EAAQU,UAAU,GAAlB,aAEzD0I,UAAW,SAACpJ,GAERmE,QAAQC,IAAI,kBAAoBpE,EAAQqJ,QAAQC,OAAOtB,UAWjEuB,EAAiB,SAACC,GACpB,IAAIC,IAAeD,EAAME,MAAM1J,QAAQ2J,qBAAuB,CAAC,KAC1D9B,MAAK,SAAC+B,GAAD,MAA8B,SAAjBA,EAAGC,cAAyB,IAAI9K,MACnD+K,IAAgBN,EAAME,MAAM1J,QAAQ2J,qBAAuB,CAAC,KAC3D9B,MAAK,SAAC+B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAI9K,MACpDgL,EAAc,SAClB,QAAQ,GACJ,KAAKP,EAAME,MAAMM,QAAQ,CAAE/E,OAAQ,UAAauE,EAAME,MAAMM,QAAQ,CAAEhF,GAAI,SACtE,MACJ,KAAKwE,EAAME,MAAMM,QAAQ,CAAE/E,OAAQ,CAAEqD,YAAa,WAC9CmB,EAAa,oBACb,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAE/E,OAAQ,gBAC/B8E,EAAc,qBACdN,EAAaA,GAAc,eAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAE/E,OAAQ,aAC/B8E,EAAc,kBACdN,EAAaA,GAAc,cAC3B,MACJ,KAAKD,EAAME,MAAMM,QAAQ,CAAEhF,GAAI,SAI/B,KAAKwE,EAAME,MAAMM,QAAQ,CAAEhF,GAAI,SAC3ByE,EAAa,kBACbM,EAAc,eACd,MACJ,QACIN,EAAaA,GAAc,OAEnC,OACI,sBAAKQ,UAAU,UAAf,UACI,wBAAQA,UAAU,SAAlB,SACKH,GACG,qBAAK9D,IAAK8D,EACNI,IAAKT,MAEjB,sBAAKQ,UAAU,SAAf,UACI,oCAAQnL,KAAK,SAASmL,UAAWF,EAC7BI,MAAO,IAAQX,IAEnB,qBAAKS,UAAU,cAAf,SACKR,WAMfW,EAAe,SAACZ,GAClB,IAAMa,EAAUb,EAAMc,YAAYzC,MAAK,SAAC+B,GAAD,MAA8B,SAAjBA,EAAGC,aAAsB9K,MACvEwL,GAAYf,EAAMc,YAAYzC,MAAK,SAAC+B,GAAD,MAA8B,UAAjBA,EAAGC,cAA0B,IAAI9K,MACvF,OACI,iDAAQkL,UAAU,QAAWT,GAA7B,cACKe,GACG,qBAAKvE,IAAKuE,EAAUL,IAAKG,IAC7B,qCAAaA,SAKzB,SAASG,IACL,MAAwBC,YAAW5F,EAAS,CACxC6F,UAAU,EACV7K,QAAS,CAEL8K,aAAcC,aAAS,SAAC5K,GACpB6K,SAASC,KAAKX,MAAMY,WAAa/K,EAAQU,UAAU,GAAGC,aAI1DqK,SAAUJ,aAAS,SAAC5K,GAChBA,EAAQiL,IAAI5K,WAGhB6K,QAASN,aAAS,SAAC5K,GACfA,EAAQiL,IAAIE,WAGhBC,SAAUR,aAAS,SAAC5K,GAChB,IAAMW,EAAY,IAAIX,EAAQqH,aAAarH,EAAQqI,WACnDlE,QAAQC,IAAI,KAAMpE,EAAQqI,WAC1B1H,EAAUiH,MAAQ5H,EAAQ4H,MAC1BjH,EAAU0K,MAAQ,kBAAMzM,EAAK,cAC7BoB,EAAQoH,IAAIkE,MAAM3K,MAEtB4K,QAASX,aAAS,SAAC5K,GAEfA,EAAQoH,IAAI5C,YAEhBgH,YAAaZ,aAAS,SAAC5K,EAASyG,GAC5B,IACMgF,EACIC,IAAgC,CAC9B5E,aAAc9G,EAAQkF,SACtB6B,YAAa,CACTC,OAAQvC,EACRwC,mBAAoBjH,EAAQqG,2BALtCoF,kBAQNzL,EAAQiL,IAAM,IAAIQ,EAClBzL,EAAQiL,IAAIU,KAAOhE,QACnB3H,EAAQiL,IAAIW,YAAa,EACzB5L,EAAQiL,IAAIY,gBAAiB,EAC7B7L,EAAQiL,IAAIa,SAAW,SAAS1F,GAC5B,IAAI2F,EAAS3F,EAAM4F,QAAQ,GACvBD,EAAOE,QACPrN,EAAK,CACDE,KAAM,YAAaC,MACf,CAAC,CACG,UAAagN,EAAO,GAAGG,WACvB,WAAcH,EAAO,GAAGnL,eAIpChC,EAAK,CAAEE,KAAM,uBArDjC,mBAAOqN,EAAP,KAAgBvN,EAAhB,KA4DMwN,GAAiBD,EAAQnM,QAAQqM,yBAA2B,IAAIC,QAAO,SAACC,GAAD,OAAYA,EAAEC,sBACtFC,KACG,SAACF,EAAQG,GAAT,OACI,cAAC,EAAD,CAAchD,MAAOyC,EACjB7B,YAAaiC,EAAEC,mBAEfG,QAAS,kBAAM/N,EAAK,CAAEE,KAAM,SAAUC,MAAOwN,EAAEK,wBAD1CF,MAOb,OACI,sBAAKzC,UAAU,MAAf,UACI,cAAC,EAAD,CAAgBP,MAAOyC,EAAS7B,YAAa,GAAIqC,QAAS,kBAAM/N,EAAK,YACrE,qBAAKqL,UAAU,iBAAf,SACI,qBAAKA,UAAU,SAAf,SACKmC,SAS7B,IAAMlG,EAAwB,kBAC1B2G,MAAM,IAAIC,QAnUS,sEAmUe,CAC9BC,OAAQ,OACRC,QAAS,CACL,4BAA6BrF,uCAEjChC,MAAK,SAAAW,GAAI,OAAIA,EAAK3H,WAGpBsO,EAAcpC,SAASqC,eAAe,QAC5CC,SACI,cAAC3C,EAAD,IACAyC,K","file":"static/js/main.2c183723.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nconst grammar: { [index: string]: { acknowledge?:string, isStarting?:string, selectedMatches?:number } } = {\r\n    \"Yes.\": { acknowledge: \"yes\" },\r\n    \"No.\": { acknowledge: \"no\" },\r\n    \"Of course.\": { acknowledge: \"yes\" },\r\n    \"No way.\": { acknowledge: \"no\" },\r\n\r\n    \"You\": { isStarting: \"computer\" },\r\n    \"You can start.\": { isStarting: \"computer\" },\r\n    \"I.\": { isStarting: \"player\" },\r\n    \"I want to start.\": { isStarting: \"player\" },\r\n\r\n    \"One.\": { selectedMatches: 1 },\r\n    \"1.\": { selectedMatches: 1 },\r\n    \"One match.\": { selectedMatches: 1 },\r\n    \"One stick.\": { selectedMatches: 1 },\r\n    \"I pick one.\": { selectedMatches: 1 },\r\n    \"I pick one match.\": { selectedMatches: 1 },\r\n    \"I pick one stick.\": { selectedMatches: 1 },\r\n    \"I take one.\": { selectedMatches: 1 },\r\n    \"I take one match.\": { selectedMatches: 1 },\r\n    \"I take one stick.\": { selectedMatches: 1 },\r\n\r\n    \"Two.\": { selectedMatches: 2 },\r\n    \"2.\": { selectedMatches: 2 },\r\n    \"Two matches.\": { selectedMatches: 2 },\r\n    \"Two sticks.\": { selectedMatches: 2 },\r\n    \"I pick two.\": { selectedMatches: 2 },\r\n    \"I pick two matches.\": { selectedMatches: 2 },\r\n    \"I pick two sticks.\": { selectedMatches: 2 },\r\n    \"I take two.\": { selectedMatches: 2 },\r\n    \"I take two matches.\": { selectedMatches: 2 },\r\n    \"I take two sticks.\": { selectedMatches: 2 },\r\n\r\n    \"Three.\": { selectedMatches: 3 },\r\n    \"3.\": { selectedMatches: 3 },\r\n    \"Three matches.\": { selectedMatches: 3 },\r\n    \"Three sticks.\": { selectedMatches: 3 },\r\n    \"I pick three.\": { selectedMatches: 3 },\r\n    \"I pick three matches.\": { selectedMatches: 3 },\r\n    \"I pick three sticks.\": { selectedMatches: 3 },\r\n    \"I take three.\": { selectedMatches: 3 },\r\n    \"I take three matches.\": { selectedMatches: 3 },\r\n    \"I take three sticks.\": { selectedMatches: 3 }\r\n}\r\n\r\nfunction check_yes(text: string): boolean {\r\n    return text === \"Yes.\" || text === \"Of course.\";\r\n}\r\n\r\nfunction check_no(text: string): boolean {\r\n    return text === \"No.\" || text === \"No way.\";\r\n}\r\n\r\nfunction getRandomInt(min: number, max: number) : number{\r\n\tmin = Math.ceil(min);\r\n\tmax = Math.floor(max);\r\n\treturn Math.floor(Math.random() * (max - min + 1)) + min; \r\n}\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1&l=us_en`)).then(data => data.json())\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: { target: 'init', actions: assign({ threshold : (context) => 0.8}) }\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'welcome_to_game',\r\n                CLICK: 'welcome_to_game'\r\n            }\r\n        },\r\n        welcome_to_game: {\r\n            initial: 'start',\r\n            on: { ENDSPEECH: 'login' },\r\n            states: {\r\n                start: {\r\n                    entry: say(\"Hello and welcome to the 10 matches game.\"),\r\n                }\r\n            }\r\n        },\r\n        login: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_login',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },\r\n                    {\r\n                        target: 'set_username'\r\n                    }\r\n                ],\r\n                HELPME: 'init',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [\"What is your name?\", \"Please tell me your name.\", \"Tell me your name, for example Mark.\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 1.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: [send((context: SDSContext) => ({\r\n                            type: 'SPEAK',\r\n                            value: context.sentences[context.sentenceCounter]\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'wait_for_name',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                wait_for_name: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me your name.\"),\r\n                    on: { ENDSPEECH: 'wait_for_name' }\r\n                }\r\n            }\r\n        },\r\n        unsure_of_login: {\r\n            initial: 'first_question',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: '.yes', cond: (context) => check_yes(context.recResult[0].utterance) },\r\n                    { target: '.no', cond: (context) => check_no(context.recResult[0].utterance) },\r\n                    { target: '.nomatch' }\r\n                ],\r\n                COMPUTER_RIGHT: { target: 'set_username', actions: [ assign({recResult: (c) => c.saved}) ] },\r\n                COMPUTER_WRONG: { target: 'login', actions: assign({recResult: (c) => c.saved}) },\r\n                TIMEOUT: '.repeat_question'\r\n            },\r\n            states: {\r\n                first_question: {\r\n                    entry: [\r\n                        assign({saved: (c) => c.recResult}),\r\n                        send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                        }))\r\n                    ],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                repeat_question: {\r\n                    entry: [send((context) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                yes: { entry: send('COMPUTER_RIGHT') },\r\n                no: { entry: send('COMPUTER_WRONG') },\r\n                nomatch: {\r\n                    entry: say(\"I did not understand that. Please say, yes, or, no.\"),\r\n                    on: { ENDSPEECH: { actions: send('LISTEN') } }\r\n                }\r\n            }\r\n        },\r\n        set_username: {\r\n            initial: 'setup',\r\n            on: { JUMP: 'help_rules' },\r\n            states: {\r\n                setup: {\r\n                    entry: [\r\n                        assign({ username: (context) => context.recResult[0].utterance! }),\r\n                        send((context: SDSContext) => ({\r\n                            type: 'SPEAK',\r\n                            value: `Nice to meet you, ${context.username}.`\r\n                        }))\r\n                    ],\r\n                    on: { ENDSPEECH: { actions: send('JUMP') } }\r\n                }\r\n            }\r\n        },\r\n        help_rules: {\r\n            initial: 'setup',\r\n            on: { JUMP: 'who_starts' },\r\n            states: {\r\n                setup: {\r\n                    entry: say(`The rules of this game are:\r\n                            You are allowed to pick 1 2 or 3 matches each turn.\r\n                            The winner is the one who takes the last matches.\r\n                            The game starts with 10 matches.`),\r\n                    on: { ENDSPEECH: { actions: send('JUMP') } }\r\n                }\r\n            }\r\n        },\r\n        who_starts: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_who_starts',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },\r\n                    {\r\n                        target: 'intro',\r\n                        cond: (context) => \"isStarting\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: [ assign({ isStarting: (c) => grammar[c.recResult[0].utterance].isStarting! }) ]\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'login',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ numberOfMatches: (context) => 10}),\r\n                        assign({ maxPick: (context) => 3}),\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [`${context.username}! Who is going to start, you or me?`, \"Which player is going to start, you or me?\", \"Please say, you, if you want, me, to start or, I, if, you, want to start.\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"You can create a meeting, or ask who is X.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: [\r\n                        send((context: SDSContext) => ({\r\n                            type: 'SPEAK',\r\n                            value: context.sentences[context.sentenceCounter]\r\n                        }))\r\n                    ],\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'select_whattodo',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                select_whattodo: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is.\"),\r\n                    on: { ENDSPEECH: 'select_whattodo' }\r\n                }\r\n            }\r\n        },\r\n        unsure_of_who_starts: {\r\n            initial: 'first_question',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: '.yes', cond: (context) => check_yes(context.recResult[0].utterance) },\r\n                    { target: '.no', cond: (context) => check_no(context.recResult[0].utterance) },\r\n                    { target: '.nomatch' }\r\n                ],\r\n                COMPUTER_RIGHT: [\r\n                    {\r\n                        target: 'intro',\r\n                        cond: (context) => \"isStarting\" in (grammar[context.saved[0].utterance] || {}),\r\n                        actions: [ assign({ isStarting: (c) => grammar[c.saved[0].utterance].isStarting! }) ]\r\n                    },\r\n                    {\r\n                        target: 'who_starts.nomatch',\r\n                        actions: [ assign({recResult: (c) => c.saved}) ]\r\n                    }\r\n                ],\r\n                COMPUTER_WRONG: { target: 'who_starts', actions: assign({recResult: (c) => c.saved}) },\r\n                TIMEOUT: '.repeat_question'\r\n            },\r\n            states: {\r\n                first_question: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: { actions: [ send('LISTEN'), assign({saved: (c) => c.recResult}) ] }\r\n                    }\r\n                },\r\n                repeat_question: {\r\n                    entry: [send((context) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.saved[0].utterance}?`\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                yes: { entry: send('COMPUTER_RIGHT') },\r\n                no: { entry: send('COMPUTER_WRONG') },\r\n                nomatch: {\r\n                    entry: say(\"I did not understand that. Please say, yes, or, no.\"),\r\n                    on: { ENDSPEECH: { actions: send('LISTEN') } }\r\n                 }\r\n            }\r\n        },\r\n        intro: {\r\n            initial: 'start',\r\n            on: {\r\n                JUMP: [\r\n                    {\r\n                        target: 'say_computer_starts',\r\n                        cond: (context) => context.isStarting === \"computer\"\r\n                    },\r\n                    {\r\n                        target: 'say_player_starts',\r\n                        cond: (context) => context.isStarting === \"player\"\r\n                    },\r\n                    {\r\n                        target: 'who_starts'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: {\r\n                    entry: [send('JUMP')],\r\n                },\r\n            }\r\n        },\r\n        say_computer_starts: {\r\n            initial: 'start',\r\n            on: { JUMP: 'computer_turn' },\r\n            states: {\r\n                start: {\r\n                    entry: say(`Ok, I will start.\r\n                                We start with 10 matches.`),\r\n                    on: { ENDSPEECH: { actions: send('JUMP') } }\r\n                }\r\n            }\r\n        },\r\n        say_computer_turn: {\r\n            initial: 'start',\r\n            on: { ENDSPEECH: 'computer_turn' },\r\n            states: {\r\n                start: {\r\n                    entry: say(\"it is now my turn.\")\r\n                }\r\n            }\r\n        },\r\n        computer_turn: {\r\n            initial: 'start',\r\n            on: {\r\n                JUMP: [\r\n                    {\r\n                        cond: (context) => context.pickNumberOfMatches === 1,\r\n                        actions: send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `Hmmm... I will pick: ${context.pickNumberOfMatches} match.`\r\n                        }))\r\n                    },\r\n                    {\r\n                        actions: send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `Hmmm... I will pick: ${context.pickNumberOfMatches} matches.`\r\n                        }))\r\n                    }\r\n                ],\r\n                ENDSPEECH: 'check_winner'\r\n            },\r\n            states: {\r\n                start: {\r\n                    entry: [\r\n                        assign({turn: (context) => \"computer\" }),\r\n                        assign({pickNumberOfMatches: (context) => getRandomInt(1,context.maxPick)}),\r\n                        send('JUMP')\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        say_player_starts: {\r\n            initial: 'start',\r\n            on: { JUMP: 'player_turn' },\r\n            states: {\r\n                start: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Ok, you start, ${context.username}.\r\n                                We start with 10 matches.`\r\n                    })),\r\n                    on: { ENDSPEECH: { actions: send('JUMP') } }\r\n                }\r\n            }\r\n        },\r\n        say_player_turn: {\r\n            initial: 'start',\r\n            on: { ENDSPEECH: 'player_turn' },\r\n            states: {\r\n                start: {\r\n                    entry: [\r\n                        send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `It is now your turn, ${context.username}.`\r\n                        }))\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        player_can_pick_1: {\r\n            initial: 'start',\r\n            on: { ENDSPEECH: 'player_picks' },\r\n            states: {\r\n                start: { entry: say('You can take 1 match.') }\r\n            }\r\n        },\r\n        player_can_pick_2: {\r\n            initial: 'start',\r\n            on: { ENDSPEECH: 'player_picks' },\r\n            states: {\r\n                start: { entry: say('Take 1 or 2 matches.') }\r\n            }\r\n        },\r\n        player_can_pick_3: {\r\n            initial: 'start',\r\n            on: { ENDSPEECH: 'player_picks' },\r\n            states: {\r\n                start: { entry: say('Take 1, 2 or 3 matches.') }\r\n            }\r\n        },\r\n        unsure_of_player_picks: {\r\n            initial: 'start',\r\n            on: {\r\n                ENDSPEECH: [\r\n                    {\r\n                        cond: (context) => context.maxPick === 1,\r\n                        target: 'player_can_pick_1'\r\n                    },\r\n                    {\r\n                        cond: (context) => context.maxPick === 2,\r\n                        target: 'player_can_pick_2'\r\n                    },\r\n                    {\r\n                        target: 'player_can_pick_3'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `I did not understand your choice, ${context.username}.`\r\n                    })),\r\n                },\r\n            }\r\n        },\r\n        player_picks: {\r\n            initial: 'start',\r\n            on: {\r\n                RECOGNISED: [\r\n                    /*{\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: '.unsure',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },*/\r\n                    {\r\n                        target: 'check_player_pick',\r\n                        cond: (context) => \"selectedMatches\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: [ assign({ selectedMatches: (c) => grammar[c.recResult[0].utterance].selectedMatches! }) ]\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_player_picks'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: { entry: send('LISTEN') }\r\n            }\r\n        },\r\n        check_player_pick: {\r\n            initial: 'start',\r\n            on: {\r\n                JUMP: [\r\n                    {\r\n                        target: 'check_winner',\r\n                        cond: (context) =>  (context.maxPick >= 1 && context.selectedMatches === 1),\r\n                        actions: assign({ pickNumberOfMatches: (context) => 1 })\r\n                    },\r\n                    {\r\n                        target: 'check_winner',\r\n                        cond: (context) =>  (context.maxPick >= 2 && context.selectedMatches === 2),\r\n                        actions: assign({ pickNumberOfMatches: (context) => 2 })\r\n                    },\r\n                    {\r\n                        target: 'check_winner',\r\n                        cond: (context) =>  (context.maxPick === 3 && context.selectedMatches === 3),\r\n                        actions: assign({ pickNumberOfMatches: (context) => 3 })\r\n                    },\r\n                    {\r\n                        target: 'wrong_pick'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: { entry: send('JUMP') }\r\n            }\r\n        },\r\n        wrong_pick: {\r\n            initial: 'start',\r\n            on: {\r\n                JUMP: [\r\n                    {\r\n                        target: 'player_can_pick_1',\r\n                        cond: (context) => context.selectedMatches === 1,\r\n                        actions: send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `You picked ${context.selectedMatches} match but can only pick ${context.maxPick}.`\r\n                        }))\r\n                    },\r\n                    {\r\n                        target: 'player_can_pick_2',\r\n                        cond: (context) => context.maxPick === 2,\r\n                        actions: send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `You picked ${context.selectedMatches} matches but can only pick ${context.maxPick}.`\r\n                        }))\r\n                    },\r\n                    {\r\n                        target: 'player_can_pick_3',\r\n                        actions: send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `You picked ${context.selectedMatches} matches but can only pick ${context.maxPick}.`\r\n                        }))\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: { entry: send('JUMP') }\r\n            }\r\n        },\r\n        player_turn: {\r\n            initial: 'start',\r\n            on: {\r\n                JUMP: [\r\n                    {\r\n                        target: 'player_can_pick_1',\r\n                        cond: (context) => context.maxPick === 1,\r\n                    },\r\n                    {\r\n                        target: 'player_can_pick_2',\r\n                        cond: (context) => context.maxPick === 2,\r\n                    },\r\n                    {\r\n                        target: 'player_can_pick_3',\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: { entry: [ assign({turn: (context) => \"player\" }), send('JUMP') ] }\r\n            }\r\n        },\r\n\r\n        check_winner: {\r\n            initial: 'start',\r\n            on: {\r\n                JUMP: [\r\n                    {\r\n                        target: 'computer_wins',\r\n                        cond: (context) => context.numberOfMatches <= 0 && context.turn === \"computer\",\r\n                    },\r\n                    {\r\n                        target: 'player_wins',\r\n                        cond: (context) => context.numberOfMatches <= 0 && context.turn === \"player\",\r\n                    },\r\n                    {\r\n                        target: 'say_computer_turn',\r\n                        cond: (context) => context.turn === \"player\",\r\n                    },\r\n                    {\r\n                        target: 'say_player_turn',\r\n                        cond: (context) => context.turn === \"computer\",\r\n                    }\r\n                ],\r\n                SAY_MATCHES_LEFT: [\r\n                    {\r\n                        cond: (context) => context.numberOfMatches === 1,\r\n                        actions: send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `There is only ${context.numberOfMatches} match left.`\r\n                        }))\r\n                    },\r\n                    {\r\n                        actions: send((context: SDSContext) => ({\r\n                            type: 'SPEAK', value: `There are ${context.numberOfMatches} matches left.`\r\n                        }))\r\n                    }\r\n                ],\r\n                ENDSPEECH: { actions: send('JUMP') }\r\n            },\r\n            states: {\r\n                start: {\r\n                    entry: [\r\n                        assign({numberOfMatches: (context) => { console.log('Number of Matches: ' + context.numberOfMatches + '   Picking: ' + context.pickNumberOfMatches); return context.numberOfMatches - context.pickNumberOfMatches }}),\r\n                        assign({maxPick: (context) => {\r\n                            if (context.numberOfMatches < 3)\r\n                                return context.numberOfMatches;\r\n                            else\r\n                                return 3;\r\n                            }}),\r\n                        send('SAY_MATCHES_LEFT')\r\n                    ]\r\n                }\r\n            }\r\n        },\r\n        computer_wins: {\r\n            initial: 'start',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'who_starts',\r\n                        cond: (context) => check_yes(context.recResult[0].utterance)\r\n                    },\r\n                    {\r\n                        target: 'goodbye',\r\n                        cond: (context) => check_no(context.recResult[0].utterance)\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: {\r\n                    entry: say(`I won!\r\n                            Would you like a revenge?`),\r\n                    on: { ENDSPEECH: { actions: send('LISTEN') } }\r\n                },\r\n                nomatch: {\r\n                    entry: say(`I did not understand that, please say yes or no.`),\r\n                    on: { ENDSPEECH: { actions: send('LISTEN') } }\r\n                }\r\n            }\r\n        },\r\n        player_wins: {\r\n            initial: 'start',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'who_starts',\r\n                        cond: (context) => check_yes(context.recResult[0].utterance)\r\n                    },\r\n                    {\r\n                        target: 'goodbye',\r\n                        cond: (context) => check_no(context.recResult[0].utterance)\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                start: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `Congratulations ${context.username}! You won!\r\n                                                Do you want to play another game?`\r\n                    })),\r\n                    on: { ENDSPEECH: { actions: send('LISTEN') } }\r\n                },\r\n                nomatch: {\r\n                    entry: say(`I did not understand that, please say yes or no.`),\r\n                    on: { ENDSPEECH: { actions: send('LISTEN') } }\r\n                }\r\n            }\r\n        },\r\n        goodbye: {\r\n            initial: 'prompt',\r\n            on: { ENDSPEECH: 'init' },\r\n            states: {\r\n                prompt: { entry: say(\"Thank you for playing the game.\") }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointmentProject\";\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}