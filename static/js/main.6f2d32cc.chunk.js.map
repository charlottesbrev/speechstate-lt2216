{"version":3,"sources":["dmAppointmentPlus.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","acknowledge","check_yes","check_create_meeting","parse_whois","startsWith","endsWith","substring","length","dmMachine","initial","states","idle","on","CLICK","target","actions","assign","threshold","context","init","TTS_READY","unsure_of_login","RECOGNISED","cond","recResult","utterance","COMPUTER_RIGHT","c","saved","COMPUTER_WRONG","TIMEOUT","first_question","entry","ENDSPEECH","repeat_question","yes","no","login","confidence","HELPME","sentenceCounter","sentences","reset","always","helpme","prompt","login_user","nomatch","set_login","JUMP","setup","username","unsure_of_ask_whattodo","name","ask_whattodo","select_whattodo","check_whois","get_result","invoke","id","src","event","fetch","Request","then","data","json","onDone","nameinfo","x","Abstract","RelatedTopics","Text","onError","error","tell_result","ask_to_meet","intro","unsure_of_welcome","welcome","ask_meeting","info_meeting","unsure_of_weekday","weekday","ask_day","info_weekday","wholeday","waitfor_yesno","info_wholeday","meeting_wholeday","info_meeting_wholeday","unsure_of_timeofday","timeofday","ask_time","info_timeofday","meeting_time","info_meeting_time","done","stop","cancel","REGION","inspect","url","iframe","machine","Machine","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","stream","createMediaStreamSource","getToken","_evt","getAuthorizationToken","azureAuthorizationToken","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","console","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.6f2d32cc.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign, actions } from \"xstate\";\r\nimport { Machine, createMachine, interpret } from 'xstate';\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string, acknowledge?:string } } = {\r\n    \"Lab\": { title: \"Laboration\" },\r\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\r\n    \"Exam.\": { title: \"Exam at the university\" },\r\n    \"On Monday.\": { day: \"Monday\" },\r\n    \"On Tuesday.\": { day: \"Tuesday\" },\r\n    \"On Wednesday.\": { day: \"Wednesday\" },\r\n    \"On Thirsday.\": { day: \"Thirsday\" },\r\n    \"On Friday.\": { day: \"Friday\" },\r\n    \"On Saturday.\": { day: \"Saturday\" },\r\n    \"On Sunday.\": { day: \"Sunday\" },\r\n    \"At 8:00\": { time: \"08:00\" },\r\n    \"At 9:00\": { time: \"09:00\" },\r\n    \"At 10\": { time: \"10:00\" },\r\n    \"At 11\": { time: \"11:00\" },\r\n    \"At 12\": { time: \"12:00\" },\r\n    \"At 13\": { time: \"13:00\" },\r\n    \"At 14\": { time: \"14:00\" },\r\n    \"At 15\": { time: \"15:00\" },\r\n    \"At 16\": { time: \"16:00\" },\r\n\r\n    \"Yes.\": { acknowledge: \"Yes\" },\r\n    \"No.\": { acknowledge: \"No\" },\r\n    \"Of course.\": { acknowledge: \"Yes\" },\r\n    \"No way.\": { acknowledge: \"No\" },\r\n}\r\n\r\nfunction check_yes(text: string): boolean {\r\n    return text === \"Yes.\" || text === \"Of course.\";\r\n}\r\n\r\nfunction check_no(text: string): boolean {\r\n    return text === \"No.\" || text === \"No way.\";\r\n}\r\n\r\nfunction check_create_meeting(text: string): boolean {\r\n    return (text === \"Create a meeting.\");\r\n}\r\n\r\nfunction parse_whois(text: string): string {\r\n    if (text.startsWith(\"Who is \") && text.endsWith(\"?\")) {\r\n        const name = text.substring(7, text.length-1);\r\n        return name!;\r\n    }\r\n    else\r\n        return \"\";\r\n}\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1&l=us_en`)).then(data => data.json())\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: { target: 'init', actions: assign({ threshold : (context) => 0.8}) }\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'login',\r\n                CLICK: 'login'\r\n            }\r\n        },\r\n        unsure_of_login: {\r\n            initial: 'first_question',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: '.yes', cond: (context) => check_yes(context.recResult[0].utterance) },\r\n                    { target: '.no' }\r\n                ],\r\n                COMPUTER_RIGHT: { target: 'set_login', actions: [ assign({recResult: (c) => c.saved}) ] },\r\n                COMPUTER_WRONG: { target: 'login', actions: assign({recResult: (c) => c.saved}) },\r\n                TIMEOUT: '.repeat_question'\r\n            },\r\n            states: {\r\n                first_question: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: { actions: [ send('LISTEN'), assign({saved: (c) => c.recResult}) ] }\r\n                    }\r\n                },\r\n                repeat_question: {\r\n                    entry: [send((context) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.saved[0].utterance}?`\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                yes: { entry: send('COMPUTER_RIGHT') },\r\n                no: { entry: send('COMPUTER_WRONG') }\r\n            }\r\n        },\r\n        login: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_login',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },\r\n                    {\r\n                        target: 'set_login'\r\n                    }\r\n                ],\r\n                HELPME: 'init',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [\"What is your name?\", \"Please tell me your name.\", \"Tell me your name, for example Mark.\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 1.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: [send((context: SDSContext) => ({\r\n                            type: 'SPEAK',\r\n                            value: context.sentences[context.sentenceCounter]\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'login_user',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                login_user: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me your name.\"),\r\n                    on: { ENDSPEECH: 'login_user' }\r\n                }\r\n            }\r\n        },\r\n        set_login: {\r\n            initial: 'setup',\r\n            on: {\r\n                JUMP: 'ask_whattodo'\r\n            },\r\n            states: {\r\n                setup: {\r\n                    entry: [assign({ username: (context) => context.recResult[0].utterance! }), say(\"\")],\r\n                    on: { ENDSPEECH: { actions: send('JUMP')} }\r\n                }\r\n            }\r\n        },\r\n        unsure_of_ask_whattodo: {\r\n            initial: 'first_question',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: '.yes', cond: (context) => check_yes(context.recResult[0].utterance) },\r\n                    { target: '.no' }\r\n                ],\r\n                COMPUTER_RIGHT: [\r\n                    {\r\n                        target: 'intro',\r\n                        cond: (context) => check_create_meeting(context.saved[0].utterance),\r\n                        actions: [ assign({recResult: (c) => c.saved}) ]\r\n                    },\r\n                    {\r\n                        target: 'check_whois',\r\n                        cond: (context) => parse_whois(context.saved[0].utterance) !== \"\",\r\n                        actions: [ assign({ name: (context) => parse_whois(context.saved[0].utterance) }), assign({recResult: (c) => c.saved})]\r\n                    },\r\n                    {\r\n                        target: 'ask_whattodo.nomatch',\r\n                        actions: [ assign({recResult: (c) => c.saved}) ]\r\n                    }\r\n                ],\r\n                COMPUTER_WRONG: { target: 'ask_whattodo', actions: assign({recResult: (c) => c.saved}) },\r\n                TIMEOUT: '.repeat_question'\r\n            },\r\n            states: {\r\n                first_question: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: { actions: [ send('LISTEN'), assign({saved: (c) => c.recResult}) ] }\r\n                    }\r\n                },\r\n                repeat_question: {\r\n                    entry: [send((context) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.saved[0].utterance}?`\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                yes: { entry: send('COMPUTER_RIGHT') },\r\n                no: { entry: send('COMPUTER_WRONG') }\r\n            }\r\n        },\r\n        ask_whattodo: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_ask_whattodo',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },\r\n                    {\r\n                        target: 'intro',\r\n                        cond: (context) => check_create_meeting(context.recResult[0].utterance),\r\n                    },\r\n                    {\r\n                        target: 'check_whois',\r\n                        cond: (context) => parse_whois(context.recResult[0].utterance) !== \"\",\r\n                        actions: assign({ name: (context) => parse_whois(context.recResult[0].utterance) })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'login',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [`Hi, ${context.username}! What do you want to do?`, \"You need to tell me what to do.\", \"You can say for example: Create a meeting.\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"You can create a meeting, or ask who is X.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: [\r\n                        send((context: SDSContext) => ({\r\n                            type: 'SPEAK',\r\n                            value: context.sentences[context.sentenceCounter]\r\n                        }))\r\n                    ],\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'select_whattodo',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                select_whattodo: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is.\"),\r\n                    on: { ENDSPEECH: 'select_whattodo' }\r\n                }\r\n            }\r\n        },\r\n        check_whois: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'info_meeting',\r\n                        cond: (context) => check_yes(context.recResult[0].utterance),\r\n                        actions: assign({ title: (context) => `Meeting with ${context.name}` })\r\n                    },\r\n                    {\r\n                        target: 'ask_whattodo',\r\n                        cond: (context) => check_no(context.recResult[0].utterance),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'ask_whattodo',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.ask_to_meet'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [\"Do you want to meet them?\", \"Do you want to meet them 2?\", \"Do you want to meet them 3?\"]})\r\n                    ],\r\n                    always: 'get_result'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 9.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                get_result: {\r\n                    invoke: {\r\n                        id: 'getPerson',\r\n                        src: (context, event) => kbRequest(context.name),\r\n                        onDone: {\r\n                            target: 'tell_result',\r\n                            actions: assign({ nameinfo: (context, event) => {\r\n                                //console.log(event.data);\r\n                                let x : string = event.data.Abstract!;\r\n                                if (x === \"\") {\r\n                                    x = event.data.RelatedTopics[0].Text!; \r\n                                }\r\n                                return x;\r\n                                }\r\n                            })\r\n                        },\r\n                        onError: {\r\n                            target: 'nomatch',\r\n                            actions: assign({ error: (context, event) => event.data })\r\n                        }\r\n                    }\r\n                },\r\n                tell_result: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: `${context.nameinfo}.`\r\n                    })),\r\n                    on: { ENDSPEECH: 'ask_to_meet' }\r\n                },\r\n                ask_to_meet: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: context.sentences[context.sentenceCounter]\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'select_whattodo',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                select_whattodo: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Say yes or no.\"),\r\n                    on: { ENDSPEECH: 'select_whattodo' }\r\n                }\r\n            }\r\n        },\r\n        intro: {\r\n            initial: 'prompt',\r\n            on: {\r\n                ENDSPEECH: 'welcome'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Let's create a meeting\"),\r\n                },\r\n            }\r\n        },\r\n        unsure_of_welcome: {\r\n            initial: 'first_question',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: '.yes', cond: (context) => check_yes(context.recResult[0].utterance) },\r\n                    { target: '.no' }\r\n                ],\r\n                COMPUTER_RIGHT: [\r\n                    {\r\n                        target: 'info_meeting',\r\n                        cond: (context) => \"title\" in (grammar[context.saved[0].utterance] || {}),\r\n                        actions: [ assign({recResult: (c) => c.saved}), assign({ title: (c) => grammar[c.saved[0].utterance].title! }) ]\r\n                    },\r\n                    {\r\n                        target: 'welcome.nomatch',\r\n                        actions: [ assign({recResult: (c) => c.saved}) ]\r\n                    }\r\n                ],\r\n                COMPUTER_WRONG: { target: 'welcome', actions: assign({recResult: (c) => c.saved}) },\r\n                TIMEOUT: '.repeat_question'\r\n            },\r\n            states: {\r\n                first_question: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: { actions: [ send('LISTEN'), assign({saved: (c) => c.recResult}) ] }\r\n                    }\r\n                },\r\n                repeat_question: {\r\n                    entry: [send((context) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.saved[0].utterance}?`\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                yes: { entry: send('COMPUTER_RIGHT') },\r\n                no: { entry: send('COMPUTER_WRONG') }\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_welcome',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },\r\n                    {\r\n                        target: 'info_meeting',\r\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'ask_whattodo',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [\"What is it about?\", \"What is it about 2?\", \"What is it about 3?\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 3.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: context.sentences[context.sentenceCounter]\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'ask_meeting',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                ask_meeting: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\r\n                    on: { ENDSPEECH: 'ask_meeting' }\r\n                }\r\n            }\r\n        },\r\n        info_meeting: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.title}`\r\n            })),\r\n            on: { ENDSPEECH: 'weekday' }\r\n        },\r\n        unsure_of_weekday: {\r\n            initial: 'first_question',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: '.yes', cond: (context) => check_yes(context.recResult[0].utterance) },\r\n                    { target: '.no' }\r\n                ],\r\n                COMPUTER_RIGHT: [\r\n                    {\r\n                        target: 'info_weekday',\r\n                        cond: (context) => \"day\" in (grammar[context.saved[0].utterance] || {}),\r\n                        actions: [ assign({recResult: (c) => c.saved}), assign({ day: (c) => grammar[c.saved[0].utterance].day! }) ]\r\n                    },\r\n                    {\r\n                        target: 'weekday.nomatch',\r\n                        actions: [ assign({recResult: (c) => c.saved}) ]\r\n                    }\r\n                ],\r\n                COMPUTER_WRONG: { target: 'weekday', actions: assign({recResult: (c) => c.saved}) },\r\n                TIMEOUT: '.repeat_question'\r\n            },\r\n            states: {\r\n                first_question: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: { actions: [ send('LISTEN'), assign({saved: (c) => c.recResult}) ] }\r\n                    }\r\n                },\r\n                repeat_question: {\r\n                    entry: [send((context) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.saved[0].utterance}?`\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                yes: { entry: send('COMPUTER_RIGHT') },\r\n                no: { entry: send('COMPUTER_WRONG') }\r\n            }\r\n        },\r\n        weekday: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_weekday',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },\r\n                    {\r\n                        target: 'info_weekday',\r\n                        cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'intro',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [\"On which day is it?\", \"On which day is it 2?\", \"On which day is it 3?\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 4.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: context.sentences[context.sentenceCounter]\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'ask_day',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                ask_day: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a weekday.\"),\r\n                    on: { ENDSPEECH: 'ask_day' }\r\n                }\r\n            }\r\n        },\r\n        info_weekday: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.day}`\r\n            })),\r\n            on: { ENDSPEECH: 'wholeday' }\r\n        },\r\n        wholeday: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'info_wholeday',\r\n                        cond: (context) => \"acknowledge\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ acknowledge: (context) => grammar[context.recResult[0].utterance].acknowledge! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'weekday',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [\"Will it take the whole day?\", \"Will it take the whole day 2?\", \"Will it take the whole day 3?\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 5.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: context.sentences[context.sentenceCounter]\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'waitfor_yesno',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                waitfor_yesno: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a yes or a no.\"),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                }\r\n            }\r\n        },\r\n        info_wholeday: {\r\n            entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.acknowledge}`\r\n                    })),\r\n            on: { ENDSPEECH: [{\r\n                    target: 'meeting_wholeday',\r\n                    cond: (context) => context.acknowledge === \"Yes\"\r\n                },\r\n                {\r\n                    target: 'timeofday',\r\n                    cond: (context) => context.acknowledge === \"No\"\r\n                }] }\r\n        },\r\n        meeting_wholeday: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'info_meeting_wholeday',\r\n                        cond: (context) => \"acknowledge\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ acknowledge: (context) => grammar[context.recResult[0].utterance].acknowledge! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'wholeday',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [`Do you want me to create a meeting titled ${context.title} on ${context.day} for the whole day?`, \"Do you want me to create the meeting?\", \"Please let me know if you want to create the meeting?\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 6.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: context.sentences[context.sentenceCounter]\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'waitfor_yesno',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                waitfor_yesno: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a yes or a no.\"),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                }\r\n            }\r\n        },\r\n        info_meeting_wholeday: {\r\n            entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.acknowledge}`\r\n                    })),\r\n            on: { ENDSPEECH: [{\r\n                    target: 'done',\r\n                    cond: (context) => context.acknowledge === \"Yes\"\r\n                },\r\n                {\r\n                    target: 'ask_whattodo',\r\n                    cond: (context) => context.acknowledge === \"No\"\r\n                }] }\r\n        },\r\n        unsure_of_timeofday: {\r\n            initial: 'first_question',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: '.yes', cond: (context) => check_yes(context.recResult[0].utterance) },\r\n                    { target: '.no' }\r\n                ],\r\n                COMPUTER_RIGHT: [\r\n                    {\r\n                        target: 'info_timeofday',\r\n                        cond: (context) => \"time\" in (grammar[context.saved[0].utterance] || {}),\r\n                        actions: [assign({recResult: (c) => c.saved}), assign({ time: (c) => grammar[c.saved[0].utterance].time! })]\r\n                    },\r\n                    {\r\n                        target: 'timeofday.nomatch',\r\n                        actions: [ assign({recResult: (c) => c.saved}) ]\r\n                    }\r\n                ],\r\n                COMPUTER_WRONG: { target: 'timeofday', actions: assign({recResult: (c) => c.saved}) },\r\n                TIMEOUT: '.repeat_question'\r\n            },\r\n            states: {\r\n                first_question: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.recResult[0].utterance}?`\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: { actions: [ send('LISTEN'), assign({saved: (c) => c.recResult}) ] }\r\n                    }\r\n                },\r\n                repeat_question: {\r\n                    entry: [send((context) => ({\r\n                        type: 'SPEAK', value: `Did you say: ${context.saved[0].utterance}?`\r\n                    }))],\r\n                    on: {\r\n                        ENDSPEECH: { actions: send('LISTEN') }\r\n                    }\r\n                },\r\n                yes: { entry: send('COMPUTER_RIGHT') },\r\n                no: { entry: send('COMPUTER_WRONG') }\r\n            }\r\n        },\r\n        timeofday: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'unsure_of_timeofday',\r\n                        cond: (context) => context.recResult[0].confidence < context.threshold\r\n                    },\r\n                    {\r\n                        target: 'info_timeofday',\r\n                        cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'meeting_wholeday',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [\"What time is your meeting?\", \"What time is your meeting 2?\", \"What time is your meeting 3?\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 7.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: context.sentences[context.sentenceCounter]\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'ask_time',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                ask_time: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what hour that is. Tell me an hour.\"),\r\n                    on: { ENDSPEECH: 'ask_time' }\r\n                }\r\n            }\r\n        },\r\n        info_timeofday: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.time}`\r\n            })),\r\n            on: { ENDSPEECH: 'meeting_time' }\r\n        },\r\n        meeting_time: {\r\n            initial: 'reset',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: '.helpme',\r\n                        cond: (context) => context.recResult[0].utterance! === \"Help.\"\r\n                    },\r\n                    {\r\n                        target: 'info_meeting_time',\r\n                        cond: (context) => \"acknowledge\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ acknowledge: (context) => grammar[context.recResult[0].utterance].acknowledge! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                HELPME: 'meeting_wholeday',\r\n                TIMEOUT: [\r\n                    {\r\n                        target: 'idle',\r\n                        cond: (context) => context.sentenceCounter >= context.sentences.length\r\n                    },\r\n                    {\r\n                        target: '.prompt'\r\n                    }\r\n                ]\r\n            },\r\n            states: {\r\n                reset: {\r\n                    entry: [\r\n                        assign({ sentenceCounter: (context) => 0}),\r\n                        assign({ sentences: (context) => [`Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}?`, `Do you want the meeting ${context.title} on ${context.day} at ${context.time}?`, \"Please tell if you want to create the meeting?\"]})\r\n                    ],\r\n                    always: 'prompt'\r\n                },\r\n                helpme: {\r\n                    entry: say(\"This is some help 8.\"),\r\n                    on: { ENDSPEECH: {actions:send('HELPME')} }\r\n                },\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: context.sentences[context.sentenceCounter]\r\n                    })),\r\n                    on: {\r\n                        ENDSPEECH: {\r\n                            target: 'waitfor_yesno',\r\n                            actions: assign({ sentenceCounter: (context) => context.sentenceCounter + 1})\r\n                        }\r\n                    }\r\n                },\r\n                waitfor_yesno: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a yes or a no.\"),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                }\r\n            }\r\n        },\r\n        info_meeting_time: {\r\n            entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.acknowledge}`\r\n                    })),\r\n            on: { ENDSPEECH: [{\r\n                    target: 'done',\r\n                    cond: (context) => context.acknowledge === \"Yes\"\r\n                },\r\n                {\r\n                    target: 'ask_whattodo',\r\n                    cond: (context) => context.acknowledge === \"No\"\r\n                }] }\r\n        },\r\n        done: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Your meeting has been created\"),\r\n                    on: { ENDSPEECH: 'stop' }\r\n                },\r\n                stop: {\r\n                    type: 'final'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointmentPlus\";\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}