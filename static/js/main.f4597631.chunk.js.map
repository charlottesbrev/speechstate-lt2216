{"version":3,"sources":["dmAppointment.ts","index.tsx"],"names":["say","text","send","_context","type","value","grammar","title","day","time","acknowledge","parse_whois","startsWith","endsWith","substring","length","dmMachine","initial","states","idle","on","CLICK","init","TTS_READY","login","RECOGNISED","target","actions","assign","username","context","recResult","utterance","TIMEOUT","prompt","entry","ENDSPEECH","login_user","nomatch","ask_whattodo","cond","name","select_whattodo","check_whois","get_result","tell_result","intro","welcome","ask_meeting","info_meeting","weekday","ask_day","info_weekday","wholeday","waitfor_yesno","info_wholeday","meeting_wholeday","info_meeting_wholeday","timeofday","ask_time","info_timeofday","meeting_time","info_meeting_time","done","stop","cancel","REGION","inspect","url","iframe","machine","Machine","id","dm","asrtts","audioCtx","_ctx","window","AudioContext","webkitAudioContext","navigator","mediaDevices","getUserMedia","audio","then","stream","createMediaStreamSource","getToken","invoke","src","_evt","getAuthorizationToken","onDone","event","azureAuthorizationToken","data","onError","ponyfillTTS","_event","callback","_onReceive","ponyfill","createSpeechSynthesisPonyfill","audioContext","credentials","region","authorizationToken","speechSynthesis","SpeechSynthesisUtterance","tts","ttsUtterance","addEventListener","voices","getVoices","voiceRe","RegExp","process","voice","find","v","test","console","error","TTS_ERROR","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","SELECT","noinput","delay","tdmPassivity","STARTSPEECH","inprogress","match","pause","speaking","fail","recLogResult","log","logIntent","nluData","intent","ReactiveButton","props","promptText","state","tdmVisualOutputInfo","el","attribute","promptImage","circleClass","matches","className","alt","style","FigureButton","caption","alternative","imageSrc","App","useMachine","devTools","changeColour","asEffect","document","body","background","recStart","asr","start","recStop","abort","ttsStart","onend","speak","ttsStop","ponyfillASR","SpeechRecognition","createSpeechRecognitionPonyfill","lang","continuous","interimResults","onresult","result","results","isFinal","transcript","confidence","current","figureButtons","tdmExpectedAlternatives","filter","o","visual_information","map","i","onClick","semantic_expression","fetch","Request","method","headers","rootElement","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.f4597631.chunk.js","sourcesContent":["import { MachineConfig, send, Action, assign } from \"xstate\";\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nconst grammar: { [index: string]: { title?: string, day?: string, time?: string, acknowledge?:string } } = {\r\n    \"Lab\": { title: \"Laboration\" },\r\n    \"Lecture.\": { title: \"Dialogue systems lecture\" },\r\n    \"Exam.\": { title: \"Exam at the university\" },\r\n    \"On Monday.\": { day: \"Monday\" },\r\n    \"On Tuesday.\": { day: \"Tuesday\" },\r\n    \"On Wednesday.\": { day: \"Wednesday\" },\r\n    \"On Thirsday.\": { day: \"Thirsday\" },\r\n    \"On Friday.\": { day: \"Friday\" },\r\n    \"On Saturday.\": { day: \"Saturday\" },\r\n    \"On Sunday.\": { day: \"Sunday\" },\r\n    \"At 8:00\": { time: \"08:00\" },\r\n    \"At 9:00\": { time: \"09:00\" },\r\n    \"At 10\": { time: \"10:00\" },\r\n    \"At 11\": { time: \"11:00\" },\r\n    \"At 12\": { time: \"12:00\" },\r\n    \"At 13\": { time: \"13:00\" },\r\n    \"At 14\": { time: \"14:00\" },\r\n    \"At 15\": { time: \"15:00\" },\r\n    \"At 16\": { time: \"16:00\" },\r\n\r\n    \"Yes.\": { acknowledge: \"Yes\" },\r\n    \"No.\": { acknowledge: \"No\" },\r\n    \"Of course.\": { acknowledge: \"Yes\" },\r\n    \"No way.\": { acknowledge: \"No\" },\r\n}\r\n\r\nfunction check_yes(text: string): boolean {\r\n    return text === \"Yes.\" || text === \"Of course.\";\r\n}\r\n\r\nfunction check_no(text: string): boolean {\r\n    return text === \"No.\" || text === \"No way.\";\r\n}\r\n\r\nfunction check_create_meeting(text: string): boolean {\r\n    return (text === \"Create a meeting.\");\r\n}\r\n\r\nfunction parse_whois(text: string): string {\r\n    if (text.startsWith(\"Who is \") && text.endsWith(\"?\")) {\r\n        const name = text.substring(7, text.length-1);\r\n        return name!;\r\n    }\r\n    else\r\n        return \"\";\r\n}\r\n\r\nconst kbRequest = (text: string) =>\r\n    fetch(new Request(`https://cors.eu.org/https://api.duckduckgo.com/?q=${text}&format=json&skip_disambig=1`)).then(data => data.json())\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'idle',\r\n    states: {\r\n        idle: {\r\n            on: {\r\n                CLICK: 'init'\r\n            }\r\n        },\r\n        init: {\r\n            on: {\r\n                TTS_READY: 'login',\r\n                CLICK: 'login'\r\n            }\r\n        },\r\n        login: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'ask_whattodo',\r\n                        actions: assign({ username: (context) => context.recResult[0].utterance! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What is your name?\"),\r\n                    on: { ENDSPEECH: 'login_user' }\r\n                },\r\n                login_user: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me your name.\"),\r\n                    on: { ENDSPEECH: 'login_user' }\r\n                }\r\n            }\r\n        },\r\n        ask_whattodo: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'intro',\r\n                        cond: (context) => check_create_meeting(context.recResult[0].utterance),\r\n                    },\r\n                    {\r\n                        target: 'check_whois',\r\n                        cond: (context) => parse_whois(context.recResult[0].utterance) != \"\",\r\n                        actions: assign({ name: (context) => parse_whois(context.recResult[0].utterance) })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: `Hi, ${context.username}! What do you want to do? You can create a meeting, or ask who is X.`\r\n                    })),\r\n                    on: { ENDSPEECH: 'select_whattodo' }\r\n                },\r\n                select_whattodo: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is.\"),\r\n                    on: { ENDSPEECH: 'select_whattodo' }\r\n                }\r\n            }\r\n        },\r\n        check_whois: {\r\n            initial: 'get_result',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info_meeting',\r\n                        cond: (context) => check_yes(context.recResult[0].utterance),\r\n                        actions: assign({ title: (context) => `Meeting with ${context.name}` })\r\n                    },\r\n                    {\r\n                        target: 'ask_whattodo',\r\n                        cond: (context) => check_no(context.recResult[0].utterance),\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.get_result'\r\n            },\r\n            states: {\r\n                get_result: {\r\n                    entry: say(\"\"), // placeholder for kbRequest\r\n                    on: { ENDSPEECH: 'tell_result' }\r\n                    //src: (context, event) => kbRequest(\"something\"),\r\n                    //onDone: 'tell_result',\r\n                    //onError: 'tell_result',\r\n                },\r\n                tell_result: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: 'SPEAK',\r\n                        value: `${context.name} is 1 2 3 ... Do you want to meet them?`\r\n                    })),\r\n                    on: { ENDSPEECH: 'select_whattodo' }\r\n                },\r\n                select_whattodo: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Say yes or no.\"),\r\n                    on: { ENDSPEECH: 'select_whattodo' }\r\n                }\r\n            }\r\n        },\r\n        intro: {\r\n            initial: 'prompt',\r\n            on: {\r\n                ENDSPEECH: 'welcome'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Let's create a meeting\"),\r\n                },\r\n            }\r\n        },\r\n        welcome: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info_meeting',\r\n                        cond: (context) => \"title\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ title: (context) => grammar[context.recResult[0].utterance].title! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What is it about?\"),\r\n                    on: { ENDSPEECH: 'ask_meeting' }\r\n                },\r\n                ask_meeting: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me something I know.\"),\r\n                    on: { ENDSPEECH: 'ask_meeting' }\r\n                }\r\n            }\r\n        },\r\n        info_meeting: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.title}`\r\n            })),\r\n            on: { ENDSPEECH: 'weekday' }\r\n        },\r\n        weekday: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info_weekday',\r\n                        cond: (context) => \"day\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ day: (context) => grammar[context.recResult[0].utterance].day! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"On which day is it?\"),\r\n                    on: { ENDSPEECH: 'ask_day' }\r\n                },\r\n                ask_day: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a weekday.\"),\r\n                    on: { ENDSPEECH: 'ask_day' }\r\n                }\r\n            }\r\n        },\r\n        info_weekday: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.day}`\r\n            })),\r\n            on: { ENDSPEECH: 'wholeday' }\r\n        },\r\n        wholeday: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info_wholeday',\r\n                        cond: (context) => \"acknowledge\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ acknowledge: (context) => grammar[context.recResult[0].utterance].acknowledge! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Will it take the whole day?\"),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                },\r\n                waitfor_yesno: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a yes or a no.\"),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                }\r\n            }\r\n        },\r\n        info_wholeday: {\r\n            entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.acknowledge}`\r\n                    })),\r\n            on: { ENDSPEECH: [{\r\n                    target: 'meeting_wholeday',\r\n                    cond: (context) => context.acknowledge === \"Yes\"\r\n                },\r\n                {\r\n                    target: 'timeofday',\r\n                    cond: (context) => context.acknowledge === \"No\"\r\n                }] }\r\n        },\r\n        meeting_wholeday: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info_meeting_wholeday',\r\n                        cond: (context) => \"acknowledge\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ acknowledge: (context) => grammar[context.recResult[0].utterance].acknowledge! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: \"SPEAK\", value: `Do you want me to create a meeting titled ${context.title} on ${context.day} for the whole day?`\r\n                    })),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                },\r\n                waitfor_yesno: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a yes or a no.\"),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                }\r\n            }\r\n        },\r\n        info_meeting_wholeday: {\r\n            entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.acknowledge}`\r\n                    })),\r\n            on: { ENDSPEECH: [{\r\n                    target: 'done',\r\n                    cond: (context) => context.acknowledge === \"Yes\"\r\n                },\r\n                {\r\n                    target: 'welcome',\r\n                    cond: (context) => context.acknowledge === \"No\"\r\n                }] }\r\n        },\r\n        timeofday: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info_timeofday',\r\n                        cond: (context) => \"time\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ time: (context) => grammar[context.recResult[0].utterance].time! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"What time is your meeting?\"),\r\n                    on: { ENDSPEECH: 'ask_time' }\r\n                },\r\n                ask_time: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what hour that is. Tell me an hour.\"),\r\n                    on: { ENDSPEECH: 'ask_time' }\r\n                }\r\n            }\r\n        },\r\n        info_timeofday: {\r\n            entry: send((context) => ({\r\n                type: 'SPEAK',\r\n                value: `OK, ${context.time}`\r\n            })),\r\n            on: { ENDSPEECH: 'meeting_time' }\r\n        },\r\n        meeting_time: {\r\n            initial: 'prompt',\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                        target: 'info_meeting_time',\r\n                        cond: (context) => \"acknowledge\" in (grammar[context.recResult[0].utterance] || {}),\r\n                        actions: assign({ acknowledge: (context) => grammar[context.recResult[0].utterance].acknowledge! })\r\n                    },\r\n                    {\r\n                        target: '.nomatch'\r\n                    }\r\n                ],\r\n                TIMEOUT: '.prompt'\r\n            },\r\n            states: {\r\n                prompt: {\r\n                    entry: send((context: SDSContext) => ({\r\n                        type: \"SPEAK\", value: `Do you want me to create a meeting titled ${context.title} on ${context.day} at ${context.time}?`\r\n                    })),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                },\r\n                waitfor_yesno: {\r\n                    entry: send('LISTEN')\r\n\t\t\t\t},\r\n                nomatch: {\r\n                    entry: say(\"Sorry, I don't know what it is. Tell me a yes or a no.\"),\r\n                    on: { ENDSPEECH: 'waitfor_yesno' }\r\n                }\r\n            }\r\n        },\r\n        info_meeting_time: {\r\n            entry: send((context) => ({\r\n                        type: 'SPEAK',\r\n                        value: `OK, ${context.acknowledge}`\r\n                    })),\r\n            on: { ENDSPEECH: [{\r\n                    target: 'done',\r\n                    cond: (context) => context.acknowledge === \"Yes\"\r\n                },\r\n                {\r\n                    target: 'welcome',\r\n                    cond: (context) => context.acknowledge === \"No\"\r\n                }] }\r\n        },\r\n        done: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: say(\"Your meeting has been created\"),\r\n                    on: { ENDSPEECH: 'stop' }\r\n                },\r\n                stop: {\r\n                    type: 'final'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, actions, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from \"./dmAppointment\";\r\nimport createSpeechRecognitionPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/SpeechToText'\r\nimport createSpeechSynthesisPonyfill from 'web-speech-cognitive-services/lib/SpeechServices/TextToSpeech';\r\n\r\n\r\nconst { send, cancel } = actions\r\n\r\nconst TOKEN_ENDPOINT = 'https://northeurope.api.cognitive.microsoft.com/sts/v1.0/issuetoken';\r\nconst REGION = 'northeurope';\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\n\r\nconst defaultPassivity = 10\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n\r\n        asrtts: {\r\n            initial: 'init',\r\n            states: {\r\n                init: {\r\n                    on: {\r\n                        CLICK: {\r\n                            target: 'getToken',\r\n                            actions: [\r\n                                assign({\r\n                                    audioCtx: (_ctx) =>\r\n                                        new ((window as any).AudioContext || (window as any).webkitAudioContext)()\r\n                                }),\r\n                                (context) =>\r\n                                    navigator.mediaDevices.getUserMedia({ audio: true })\r\n                                        .then(function(stream) { context.audioCtx.createMediaStreamSource(stream) })\r\n                            ]\r\n                        }\r\n                    }\r\n                },\r\n                getToken: {\r\n                    invoke: {\r\n                        id: \"getAuthorizationToken\",\r\n                        src: (_ctx, _evt) => getAuthorizationToken(),\r\n                        onDone: {\r\n                            actions: [\r\n                                assign((_context, event) => { return { azureAuthorizationToken: event.data } }),\r\n                                'ponyfillASR'],\r\n                            target: 'ponyfillTTS'\r\n                        },\r\n                        onError: {\r\n                            target: 'fail'\r\n                        }\r\n                    }\r\n                },\r\n                ponyfillTTS: {\r\n                    invoke: {\r\n                        id: 'ponyTTS',\r\n                        src: (context, _event) => (callback, _onReceive) => {\r\n                            const ponyfill = createSpeechSynthesisPonyfill({\r\n                                audioContext: context.audioCtx,\r\n                                credentials: {\r\n                                    region: REGION,\r\n                                    authorizationToken: context.azureAuthorizationToken,\r\n                                }\r\n                            });\r\n                            const { speechSynthesis, SpeechSynthesisUtterance } = ponyfill;\r\n                            context.tts = speechSynthesis\r\n                            context.ttsUtterance = SpeechSynthesisUtterance\r\n                            context.tts.addEventListener('voiceschanged', () => {\r\n                                context.tts.cancel()\r\n                                const voices = context.tts.getVoices();\r\n                                let voiceRe = RegExp(\"en-US\", 'u')\r\n                                if (process.env.REACT_APP_TTS_VOICE) {\r\n                                    voiceRe = RegExp(process.env.REACT_APP_TTS_VOICE, 'u')\r\n                                }\r\n                                const voice = voices.find((v: any) => voiceRe.test(v.name))!\r\n                                if (voice) {\r\n                                    context.voice = voice\r\n                                    callback('TTS_READY')\r\n                                } else {\r\n                                    console.error(`TTS_ERROR: Could not get voice for regexp ${voiceRe}`)\r\n                                    callback('TTS_ERROR')\r\n                                }\r\n                            })\r\n                        }\r\n                    },\r\n                    on: {\r\n                        TTS_READY: 'idle',\r\n                        TTS_ERROR: 'fail'\r\n                    }\r\n                },\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    },\r\n                },\r\n                recognising: {\r\n                    initial: 'noinput',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => {\r\n                                    return {\r\n                                        recResult: event.value\r\n                                    }\r\n                                })],\r\n                            target: '.match'\r\n                        },\r\n                        RECOGNISED: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: '.pause'\r\n                    },\r\n                    states: {\r\n                        noinput: {\r\n                            entry: [\r\n                                'recStart',\r\n                                send(\r\n                                    { type: 'TIMEOUT' },\r\n                                    { delay: (context) => (1000 * (context.tdmPassivity || defaultPassivity)), id: 'timeout' }\r\n                                )],\r\n                            on: {\r\n                                TIMEOUT: '#root.asrtts.idle',\r\n                                STARTSPEECH: 'inprogress'\r\n                            },\r\n                            exit: cancel('timeout')\r\n                        },\r\n                        inprogress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                        pause: {\r\n                            entry: 'recStop',\r\n                            on: { CLICK: 'noinput' }\r\n                        }\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                        SELECT: 'idle',\r\n                        CLICK: { target: 'idle', actions: send('ENDSPEECH') }\r\n                    },\r\n                    exit: 'ttsStop',\r\n                },\r\n                fail: {}\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('U>', context.recResult[0][\"utterance\"], context.recResult[0][\"confidence\"]);\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n    alternative: any;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    var promptText = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"name\") || {}).value;\r\n    var promptImage = ((props.state.context.tdmVisualOutputInfo || [{}])\r\n        .find((el: any) => el.attribute === \"image\") || {}).value;\r\n    var circleClass = \"circle\"\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'fail' }) || props.state.matches({ dm: 'fail' }):\r\n            break;\r\n        case props.state.matches({ asrtts: { recognising: 'pause' } }):\r\n            promptText = \"Click to continue\"\r\n            break;\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            circleClass = \"circle-recognising\"\r\n            promptText = promptText || 'Listening...'\r\n            break;\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            circleClass = \"circle-speaking\"\r\n            promptText = promptText || 'Speaking...'\r\n            break;\r\n        case props.state.matches({ dm: 'idle' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        case props.state.matches({ dm: 'init' }):\r\n            promptText = \"Click to start!\"\r\n            circleClass = \"circle-click\"\r\n            break;\r\n        default:\r\n            promptText = promptText || '\\u00A0'\r\n    }\r\n    return (\r\n        <div className=\"control\">\r\n            <figure className=\"prompt\">\r\n                {promptImage &&\r\n                    <img src={promptImage}\r\n                        alt={promptText} />}\r\n            </figure>\r\n            <div className=\"status\">\r\n                <button type=\"button\" className={circleClass}\r\n                    style={{}} {...props}>\r\n                </button>\r\n                <div className=\"status-text\">\r\n                    {promptText}\r\n                </div>\r\n            </div>\r\n        </div>);\r\n}\r\n\r\nconst FigureButton = (props: Props): JSX.Element => {\r\n    const caption = props.alternative.find((el: any) => el.attribute === \"name\").value\r\n    const imageSrc = (props.alternative.find((el: any) => el.attribute === \"image\") || {}).value\r\n    return (\r\n        <figure className=\"flex\" {...props}>\r\n            {imageSrc &&\r\n                <img src={imageSrc} alt={caption} />}\r\n            <figcaption>{caption}</figcaption>\r\n        </figure>\r\n    )\r\n}\r\n\r\nfunction App() {\r\n    const [current, send] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n\r\n            changeColour: asEffect((context) => {\r\n                document.body.style.background = context.recResult[0].utterance;\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n\r\n            recStart: asEffect((context) => {\r\n                context.asr.start()\r\n                /* console.log('Ready to receive a voice input.'); */\r\n            }),\r\n            recStop: asEffect((context) => {\r\n                context.asr.abort()\r\n                /* console.log('Recognition stopped.'); */\r\n            }),\r\n            ttsStart: asEffect((context) => {\r\n                const utterance = new context.ttsUtterance(context.ttsAgenda);\r\n                console.log(\"S>\", context.ttsAgenda)\r\n                utterance.voice = context.voice\r\n                utterance.onend = () => send('ENDSPEECH')\r\n                context.tts.speak(utterance)\r\n            }),\r\n            ttsStop: asEffect((context) => {\r\n                /* console.log('TTS STOP...'); */\r\n                context.tts.cancel()\r\n            }),\r\n            ponyfillASR: asEffect((context, _event) => {\r\n                const\r\n                    { SpeechRecognition }\r\n                        = createSpeechRecognitionPonyfill({\r\n                            audioContext: context.audioCtx,\r\n                            credentials: {\r\n                                region: REGION,\r\n                                authorizationToken: context.azureAuthorizationToken,\r\n                            }\r\n                        });\r\n                context.asr = new SpeechRecognition()\r\n                context.asr.lang = process.env.REACT_APP_ASR_LANGUAGE || 'en-US'\r\n                context.asr.continuous = true\r\n                context.asr.interimResults = true\r\n                context.asr.onresult = function(event: any) {\r\n                    var result = event.results[0]\r\n                    if (result.isFinal) {\r\n                        send({\r\n                            type: \"ASRRESULT\", value:\r\n                                [{\r\n                                    \"utterance\": result[0].transcript,\r\n                                    \"confidence\": result[0].confidence\r\n                                }]\r\n                        })\r\n                    } else {\r\n                        send({ type: \"STARTSPEECH\" });\r\n                    }\r\n                }\r\n\r\n            })\r\n        }\r\n    });\r\n    const figureButtons = (current.context.tdmExpectedAlternatives || []).filter((o: any) => o.visual_information)\r\n        .map(\r\n            (o: any, i: any) => (\r\n                <FigureButton state={current}\r\n                    alternative={o.visual_information}\r\n                    key={i}\r\n                    onClick={() => send({ type: 'SELECT', value: o.semantic_expression })} />\r\n            )\r\n        )\r\n\r\n    switch (true) {\r\n        default:\r\n            return (\r\n                <div className=\"App\">\r\n                    <ReactiveButton state={current} alternative={{}} onClick={() => send('CLICK')} />\r\n                    <div className=\"select-wrapper\">\r\n                        <div className=\"select\">\r\n                            {figureButtons}\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            )\r\n    }\r\n\r\n};\r\n\r\nconst getAuthorizationToken = () => (\r\n    fetch(new Request(TOKEN_ENDPOINT, {\r\n        method: 'POST',\r\n        headers: {\r\n            'Ocp-Apim-Subscription-Key': process.env.REACT_APP_SUBSCRIPTION_KEY!\r\n        },\r\n    })).then(data => data.text()))\r\n\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}